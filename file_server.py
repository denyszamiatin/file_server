"""
Module provides set of functions to work with files
"""

import os
import time
import logging
import functools
import util
import config


class FileServerError(Exception):
    """
    Exception for File Server
    """
    pass


def handle_os_error(func):
    """
    Decorator that catchs OS level exceptions
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        " Wrapper "
        try:
            return func(*args, **kwargs)
        except (OSError, IOError) as err:
            logging.error("Error occured: {}".format(err))
            raise FileServerError(str(err))
    return wrapper


class File:
    """
    File class implements file operations
    """

    @staticmethod
    @handle_os_error
    def chg_dir(working_dir=config.get_working_dir()):
        """
        Create the directory if it doesn't exist and change current directory to it
        """
        if not os.path.isdir(working_dir):
            os.mkdir(working_dir)
        os.chdir(working_dir)
        return os.getcwd()

    @staticmethod
    @handle_os_error
    def create_file(data):
        """
        Create the file with data as content. Return autogenerated name of the file.
        """
        filename = util.get_random_name()
        with open(filename, "wb") as f_obj:
            f_obj.write(data)
        logging.info("File '{0}' created successfully".format(filename))
        return filename

    @staticmethod
    @handle_os_error
    def del_file(filename):
        """
        Remove file by name
        """
        os.remove(filename)
        logging.info("File '{0}' removed successfully".format(filename))

    @staticmethod
    @handle_os_error
    def read_file(filename):
        """
        Return file content
        """
        with open(filename, "rb") as f_obj:
            return f_obj.read()

    @staticmethod
    @handle_os_error
    def get_metadata(filename):
        """
        Return the size and the creation date for the file
        """
        metadata = os.stat(filename)
        return {
            "size": metadata.st_size,
            "date": time.ctime(metadata.st_birthtime),
        }

    @staticmethod
    @handle_os_error
    def list_files():
        """
        Return the list of filenames in current directory
        """
        cwd = os.getcwd()
        return [f for f in os.listdir(cwd) if os.path.isfile(os.path.join(cwd, f))]
